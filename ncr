#include <bits/stdc++.h>
using namespace std;

const double eps = 1e-6;
#define ll long long
typedef long double ld;
#define pb push_back // for vector
#define pi pair<int, int>
#define all(a) a.begin(), a.end()
#define rep(i, a, b) for (ll i = a; i < b; i++)
#define ff first
#define ss second
#define vt vector
#define vi vt<ll>
#define ub upper_bound
#define lb lower_bound
#define repr(i, n, a) for (ll i = n; i >= a; i--)
#define dq deque
#define inset(a, st) st.find(a) != st.end()
#define issub(a, b) b.find(a) != string::npos // check if a is substr of b
#define len(a) (ll)a.size()
const ld PI = 2 * acos(0.0);
const ll mod = 1e9+7;
const ll mod2 = 998244353;
const ll nax = 2e5 + 5;
const ll N = 2e5 + 1;

void ff(){
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
}

vector<ll> fac, inv_fac;


ll binexpo(ll x, ll y, ll mod) {
    ll res = 1;
    while (y > 0) {
        if (y & 1)
            res = res * x % mod;
        x = x * x % mod;
        y >>= 1;
    }
    return res;
}


void precompute_factorials(ll n, ll mod) {
    fac.resize(n + 1);
    inv_fac.resize(n + 1);
    fac[0] = fac[1] = 1;
    for (ll i = 2; i <= n; i++) {
        fac[i] = fac[i - 1] * i % mod;
    }
    inv_fac[n] = binexpo(fac[n], mod - 2, mod);
    for (ll i = n - 1; i >= 0; i--) {
        inv_fac[i] = inv_fac[i + 1] * (i + 1) % mod;
    }
}


ll ncr(ll n, ll r, ll mod) {
    if (n < r || r < 0) return 0;
    return fac[n] * inv_fac[r] % mod * inv_fac[n - r] % mod;
}

void solve() {
    precompute_factorials(N, mod);
