vt<int>PS , PS2;
vt<int>PS3, PS4;

vt<pi<ll,ll>>pd(1e6,{1,1});
bool check(string & s1 , string & s2 , int i, int j, int len ){
    if(i + len > s1.size() || j + len > s2.size()){
      return false;
    }
   
    ll val1 = (PS[i] - PS[i+len] + mod )% mod;
    ll val2 = (PS2[j] - PS2[j+len] + mod) % mod;
    ll val3 = (PS3[i]- PS3[i+len] + mod2)% mod2;
    ll val4 = (PS4[j]- PS4[j+len]+ mod2)% mod2;
    if(s1.size()-i > s2.size() - j){
     ll val = s1.size() - i - s2.size() + j;
     val2 *= pd[val].first; val2 %= mod;
     val4 *= pd[val].second; val4 %= mod2;
    }
    else {
      ll val = s2.size() - j -s1.size() + i ;
      val1 *= pd[val].first; val1 %= mod;
      val3 *= pd[val].second; val3 %= mod2;
    }
  
    if(val1 == val2 && val3 == val4){return 1;}
    return 0;
}

void solve(){


string s1, s2;
cin>>s1>>s2;
int N1 = s1.size(), N2 = s2.size();
PS.assign(N1+1,0); PS2.assign(N2+1,0);
PS3.assign(N1+1,0); PS4.assign(N2+1,0);
ll d = 256;
ll h = d, h2  = d;
PS[N1-1] = s1[N1-1];
PS3[N1-1] = s1[N1-1];
PS2[N2-1] = s2[N2-1];
PS4[N2-1] = s2[N2-1];
repr(i , N1-2 ,0){
  PS[i] = (PS[i+1] + (s1[i]*h)% mod)%mod;
  PS3[i] = (PS3[i+1] + (s1[i]*h2)% mod2)%mod2;
  h *= d ; h %= mod;
  h2 *= d ; h2 %= mod2;
}
h = d , h2 = d;
repr(i , N2-2 ,0){
  PS2[i] = (PS2[i+1] + (s2[i]*h)% mod)%mod;
  PS4[i] = (PS4[i+1] + (s2[i]*h2)% mod2)%mod2;
  h *= d ; h %= mod;
  h2 *= d ; h2 %= mod2;
}

rep(i , 1 , 1e6){
  pd[i].first = (pd[i-1].first * d) % mod; pd[i].first %= mod;
  pd[i].second = (pd[i-1].second * d) % mod2; pd[i].second %= mod2;
}


 if(check(s1, s2, 0, 3, 2)){
  cout <<"YES\n";return;
 }
  cout <<"NO\n";
}
